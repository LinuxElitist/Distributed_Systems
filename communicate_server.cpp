/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "communicate.h"
#include "article.h"
#include "communication.h"
#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

std::set<Subscriber> subs_list;

int *
join_1_svc(char *ip, int port,  struct svc_req *rqstp)
{
	static int result;

	Subscriber sub(ip,port);
	subs_list.insert(sub);

	result = 0;
	std::cout << ip << " Joined at " << port << "\n";
	/*
	 * insert server code here
	 */
	return &result;
}

int *
leave_1_svc(char *ip, int port,  struct svc_req *rqstp)
{
	static int  result;
	Subscriber leaving_sub(ip, port);

	auto client = subs_list.find(leaving_sub);
	if(client != subs_list.end()){
	    subs_list.erase(client);
		std::cout << ip << " Left " << port << "\n";
	    result = 0;
	}
	else {
		std::cout << ip << " should be joined for it to leave\n";
	}
	/*
	 * insert server code here
	 */

	return &result;
}

int *
subscribe_1_svc(char *ip, int port, char *article,  struct svc_req *rqstp)
{
	static int  result;
	Subscriber sub(ip, port);
	Article art(article);
	art.content = "";

	auto sub_it = subs_list.find(sub);
	if (sub_it != subs_list.end()) {
		(*sub_it).articles.insert(art);
		result = 0;
		std::cout << ip << " subscribed for \"" << art.type << ";" << art.orig << ";" << art.org << "\"\n";
	}
	else {
		std::cout << ip << " failed to subscribe for \"" << article << "\n";
	}

	/*
	 * insert server code here
	 */

 // std::cout << " Wrong Format for Subscription (should not have content)\n";
	return &result;
}

int *
unsubscribe_1_svc(char *ip, int port, char *article,  struct svc_req *rqstp)
{
	static int  result;
	Subscriber sub(ip, port);
	Article art(article);

	auto sub_it = subs_list.find(sub);
	if (sub_it != subs_list.end()) {
	    if ((*sub_it).isSubs(art)) {
		    (*sub_it).unSubs(art);
	    	result = 0;
			std::cout << ip << " unsubscribed from \"" << art.type << ";" << art.orig << ";" << art.org << "\"\n";
		}
		else {
			std::cout << ip << " failed to unsubscribe for \"" << article << "\"\n";
		}
    }
	else {
		std::cout << ip << " failed to unsubscribe\n";
	}
	/*
	 * insert server code here
	 */

	return &result;
}

int *
publish_1_svc(char *article, char *ip, int port,  struct svc_req *rqstp)
{
	static int  result;
	Subscriber sub(ip, port);
	Article art(article);
	art.content.append("Contents added\n");

	for (auto sub_it = subs_list.begin(); sub_it != subs_list.end(); ++sub_it) {
	  	if ((*sub_it).isSubs(art)) {
			send_client((*sub_it), article);
        	result = 0;
			std::cout << " Published " << art.content << " to " << ip << "\n";
		}
		else{
			std::cout << " Publish failed to " << ip << "\n";
		}
	}

	/*

	 * insert server code here
	 */

	return &result;
}

int *
ping_1_svc(struct svc_req *rqstp)
{
	static int  result;

	result = 0;
	std::cout << "ping received\n";

	/*
	 * insert server code here
	 */

	return &result;
}
